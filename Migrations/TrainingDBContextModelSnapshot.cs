// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using training.Data;

#nullable disable

namespace training.Migrations
{
    [DbContext(typeof(TrainingDBContext))]
    partial class TrainingDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("training.Models.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("DepartmentId");

                    b.ToTable("dara_departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("d4e5c630-ecaa-4f6b-a8c7-1d47c7a5f91a"),
                            Name = "Human Resources"
                        },
                        new
                        {
                            DepartmentId = new Guid("7b7f2a1b-dc3e-4c7c-b514-92fcf015cb57"),
                            Name = "Software Development"
                        },
                        new
                        {
                            DepartmentId = new Guid("32c61738-f1e5-4b8e-9c42-5cb78a16012a"),
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            DepartmentId = new Guid("1e21aa4d-35db-43c0-a2e0-d5e155582cb5"),
                            Name = "IT Support"
                        },
                        new
                        {
                            DepartmentId = new Guid("47cc9f6a-6a0f-4c12-9b96-82a1c57f9b71"),
                            Name = "DevOps"
                        },
                        new
                        {
                            DepartmentId = new Guid("6e420738-b23c-41c4-82f3-fd6d0a6a5f58"),
                            Name = "Product Management"
                        },
                        new
                        {
                            DepartmentId = new Guid("64b63eec-bb98-4121-bdf8-940ee1de9150"),
                            Name = "Sales and Marketing"
                        },
                        new
                        {
                            DepartmentId = new Guid("9400ed2a-2ae6-453f-9130-14e46e10553a"),
                            Name = "Finance and Accounting"
                        },
                        new
                        {
                            DepartmentId = new Guid("adf08c7e-7c09-4ef3-bb9c-f4993a2b41aa"),
                            Name = "UI/UX Design"
                        },
                        new
                        {
                            DepartmentId = new Guid("ec7e2c46-166a-43a4-8c03-1b206a35f159"),
                            Name = "Cybersecurity"
                        });
                });

            modelBuilder.Entity("training.Models.Domain.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("create_name");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("dara_employees");
                });

            modelBuilder.Entity("training.Models.Domain.Employee", b =>
                {
                    b.HasOne("training.Models.Domain.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("training.Models.Domain.Department", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
